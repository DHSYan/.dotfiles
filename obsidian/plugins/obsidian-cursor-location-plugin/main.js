/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');
var view = require('@codemirror/view');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

const DEFAULT_SETTINGS = {
    numberCursors: 1,
    selectionMode: "full",
    displayCharCount: true,
    displayPatternOption: "clt",
    displayPattern: "",
    cursorSeperatorOption: "slash",
    cursorSeperator: "",
    rangeSeperatorOption: "arrow",
    rangeSeperator: "",
    displayCursorLineCount: true,
    displayTotalLines: true,
    displayCursorLines: false,
    cursorLinePatternOption: "square",
    cursorLinePattern: "",
    statusBarPadding: false,
    paddingStepOption: "medium",
    paddingStep: 9,
    wordyDisplay: false,
    fuzzyAmount: "strictpercent",
    excludeFrontmatter: false,
    frontmatterString: "frontmatter",
    frontmatterStringCustom: "",
};
const MIDDLEPATTERN = /^.*(ln|ch).*?ct.*?(ln|ch).*/i;
const BEGINPATTERN = /^.*ct.*((ln|ch).*?(ln|ch).*)/i;
const ENDPATTERN = /(.*(ln|ch).*?(ln|ch)).*?ct.*$/i;
const FRONTMATTER = /^\s*?---\n+?[\s\S]*?\n---/;
const MULTCURSORS = "{} cursors";
const SELECTTEXTDISPLAY = `{} selected`;
const SELECTLINEDISPLAY = `{} lines`;
const SELECTMULT = ` ({} / {})`;
const SELECTSINGLE = ` ({})`;
// preamble, metadata, frontmatter
// optional names, optional include
// top, near top, middle, near bottom, bottom
// 0-19, 20-39, 40-59, 60-79, 80-100
const LOWRANGEWORDS = new Map([
    [0, "top"],
    [20, "near top"],
    [40, "middle"],
    [60, "near bottom"],
    [80, "bottom"],
    [100, "bottom"],
]);
// top, middle, bottom
// 0-32, 33-65, 66-99(/100)
const HIGHRANGEWORDS = new Map([
    [0, "top"],
    [33, "middle"],
    [66, "bottom"],
    [99, "bottom"],
    [100, "bottom"],
]);
// top, %%, bottom
// 0, 1-99, 100
const HARDPERCENTWORDS = new Map([
    [0, "top"],
    [100, "bottom"],
]);
const CURSORSEPERATOR = new Map([
    ["slash", "/"],
    ["pipe", "|"],
    ["tilde", "~"],
    ["ampersand", "&"],
]);
const RANGESEPERATOR = new Map([
    ["arrow", "â†’"],
    ["dash", "-"],
    ["tilde", "~"],
]);
const PADDINGSTEP = new Map([
    ["low", 6],
    ["medium", 12],
    ["high", 24],
]);
const DISPLAYPATTERN = new Map([
    ["clt", "ch:ln/ct"],
    ["lct", "ln:ch/ct"],
    ["clt2", "ch ln-ct"],
    ["clts", "ch ln ct"],
    ["lcts", "ln ch ct"],
]);

function format(raw, ...args) {
    for (let arg of args) {
        raw = raw.replace("{}", arg.toString());
    }
    return raw;
}
function closest(val, to) {
    return Math.floor(val / to) * to;
}
function showElem(elem) {
    elem.removeAttribute("style");
}
function hideElem(elem) {
    elem.setAttribute("style", "display:none;");
}

class SettingElement {
    constructor(container, title, plugin, name, override = null) {
        this.name = name;
        this.plugin = plugin;
        this.override = override;
        this.children = [];
        this.element = container.createDiv();
        this.element.createEl("h3", { text: title });
    }
    resetComponent() {
        const value = DEFAULT_SETTINGS[this.name];
        console.log(`resetting ${this.name}: ${value}`);
        let component = this.setting.components[0];
        component.setValue(value);
        this.plugin.settings[this.name] = value;
        if (this.warning != null)
            this.warning.setText("");
    }
    resetSetting() {
        let value = this.override ? this.override : DEFAULT_SETTINGS[this.name];
        new obsidian.Setting(this.element)
            .setName(`Reset to default value of '${value}'`)
            .addButton((cb) => cb.setButtonText("Reset").onClick(() => __awaiter(this, void 0, void 0, function* () {
            this.resetComponent();
            yield this.plugin.saveSettings();
        })));
    }
    createWarning() {
        return this.element.createEl("p", { text: "", attr: { style: "color:red" } });
    }
    basicOnChange() {
        return (value) => __awaiter(this, void 0, void 0, function* () {
            if (this.plugin.settings[this.name] != value) {
                console.log(`changing ${this.name}: ${value}`);
            }
            if (typeof DEFAULT_SETTINGS[this.name] === "boolean") {
                this.plugin.settings[this.name] = value;
            }
            else {
                this.plugin.settings[this.name] = value === null || value === void 0 ? void 0 : value.trim();
            }
            yield this.plugin.saveSettings();
        });
    }
    numberOnChange() {
        return (value) => __awaiter(this, void 0, void 0, function* () {
            let parsedValue = parseInt(value);
            if (!isNaN(parsedValue)) {
                if (this.plugin.settings[this.name] != value) {
                    console.log(`changing ${this.name}: ${value}`);
                }
                this.warning.setText("");
                this.plugin.settings[this.name] = parsedValue;
                yield this.plugin.saveSettings();
                this.error = false;
            }
            else {
                console.log(`unable to update ${this.name}, `, `unable to parse new value into integer: ${value}`);
                this.warning.setText(`"${value}" is not a full number, unable to save.`);
                this.error = true;
            }
        });
    }
    show() {
        if (this.element)
            showElem(this.element);
        if (this.warning)
            showElem(this.warning);
        this.showChildren();
    }
    showChildren() {
        this.children.forEach(c => c.show());
    }
    hide() {
        if (this.element)
            hideElem(this.element);
        if (this.warning)
            hideElem(this.warning);
        this.hideChildren();
    }
    hideChildren() {
        this.children.forEach(c => c.hide());
    }
}
class SettingElementCustom extends SettingElement {
    customOnChange() {
        return (value) => __awaiter(this, void 0, void 0, function* () {
            if (this.plugin.settings[this.customName] != value) {
                console.log(`changing ${this.customName}: ${value}`);
            }
            if (typeof DEFAULT_SETTINGS[this.customName] === "boolean") {
                this.plugin.settings[this.customName] = value;
            }
            else {
                this.plugin.settings[this.customName] = value === null || value === void 0 ? void 0 : value.trim();
            }
            yield this.plugin.saveSettings();
        });
    }
    toggleCustom() {
        const isCustom = this.plugin.settings[this.name] == "custom";
        const elem = this.custom.settingEl;
        isCustom ? showElem(elem) : hideElem(elem);
    }
    basicOnChange() {
        const _super = Object.create(null, {
            basicOnChange: { get: () => super.basicOnChange }
        });
        return (value) => __awaiter(this, void 0, void 0, function* () {
            yield _super.basicOnChange.call(this)(value);
            this.toggleCustom();
        });
    }
}
class NumberCursors extends SettingElement {
    constructor(container, plugin) {
        super(container, "# of Cursors", plugin, "numberCursors");
        this.setting = new obsidian.Setting(this.element)
            .setName('Number of cursor positions that will display \
          in the status bar before switching to "N cursors".')
            .addText((text) => {
            var _a, _b;
            text
                .setValue((_b = (_a = this.plugin.settings) === null || _a === void 0 ? void 0 : _a.numberCursors) === null || _b === void 0 ? void 0 : _b.toString())
                .onChange(this.onChange());
        });
        this.warning = this.createWarning();
        this.resetSetting();
    }
    onChange() {
        return (value) => __awaiter(this, void 0, void 0, function* () {
            yield this.numberOnChange()(value);
            if (!this.error)
                this.toggleChildren();
        });
    }
    showChildren() {
        if (this.plugin.settings.numberCursors != 1) {
            super.showChildren();
        }
    }
    toggleChildren() {
        const num = this.plugin.settings.numberCursors;
        num == 1 ? super.hideChildren() : super.showChildren();
    }
}
class SelectionMode extends SettingElement {
    constructor(container, plugin) {
        super(container, "Selecion Mode", plugin, "selectionMode", "Full Selection");
        this.setting = new obsidian.Setting(this.element)
            .setName("Display just the beginning, \
        just the end, or the full range of a selection.")
            .addDropdown((cb) => {
            cb
                .addOption("full", "Full Selection")
                .addOption("begin", "Beginning")
                .addOption("end", "End")
                .setValue(this.plugin.settings.selectionMode
                || DEFAULT_SETTINGS.selectionMode)
                .onChange(this.onChange());
        });
        this.resetSetting();
    }
    onChange() {
        return (value) => __awaiter(this, void 0, void 0, function* () {
            yield this.basicOnChange()(value);
            this.toggleChildren();
        });
    }
    showChildren() {
        if (this.plugin.settings.selectionMode == "full") {
            super.showChildren();
        }
    }
    toggleChildren() {
        const mode = this.plugin.settings.selectionMode;
        mode == "full" ? super.showChildren() : super.hideChildren();
    }
}
class DisplayCharCount extends SettingElement {
    constructor(container, plugin) {
        super(container, "Display Character Count", plugin, "displayCharCount");
        this.setting = new obsidian.Setting(this.element)
            .setName("Display the total number of characters selected.")
            .addToggle((cb) => {
            cb
                .setValue(this.plugin.settings.displayCharCount != null
                ? this.plugin.settings.displayCharCount
                : DEFAULT_SETTINGS.displayCharCount)
                .onChange(this.basicOnChange());
        });
        this.resetSetting();
    }
}
class DisplayTotalLineCount extends SettingElement {
    constructor(container, plugin) {
        super(container, "Display Total Line Count", plugin, "displayTotalLines");
        this.setting = new obsidian.Setting(this.element)
            .setName("Display the total number of lines selected.")
            .addToggle((cb) => {
            cb
                .setValue(this.plugin.settings.displayTotalLines != null
                ? this.plugin.settings.displayTotalLines
                : DEFAULT_SETTINGS.displayTotalLines)
                .onChange(this.basicOnChange());
        });
        this.resetSetting();
    }
}
class DisplayPattern extends SettingElementCustom {
    constructor(container, plugin) {
        super(container, "Individual Cursor Pattern", plugin, "displayPatternOption", "ch:ln/ct");
        this.customName = "displayPattern";
        this.setting = new obsidian.Setting(this.element)
            .setName("Pattern to display location information for each cursor.")
            .setDesc("`ch` is the column the cursor is at in the current line, \
        `ln` is the current line number, \
        `ct` is the total line numbers in the file (count).")
            .addDropdown((cb) => {
            cb
                .addOption("clt", "ch:ln/ct")
                .addOption("lct", "ln:ch/ct")
                .addOption("clt2", "ch ln-ct")
                .addOption("clts", "ch ln ct")
                .addOption("lcts", "ln ch ct")
                .addOption("custom", "custom")
                .setValue(this.plugin.settings.displayPatternOption
                || DEFAULT_SETTINGS.displayPatternOption)
                .onChange(this.basicOnChange());
        });
        this.custom = new obsidian.Setting(this.element)
            .setName("Custom pattern for display")
            .setDesc("If `ct` is the first or last of the three values, \
        it will be removed when displaying a range.")
            .addText((text) => {
            text
                .setValue(this.plugin.settings.displayPattern)
                .onChange(this.customOnChange());
        });
        this.resetSetting();
        this.toggleCustom();
    }
}
class CursorSeperator extends SettingElementCustom {
    constructor(container, plugin) {
        super(container, "Cursor Seperator", plugin, "cursorSeperatorOption", "slash `/`");
        this.customName = "cursorSeperator";
        this.setting = new obsidian.Setting(this.element)
            .setName("String to seperate multiple curor locations when \
        `# of Cursors` is greater than 1. Selecting `custom` \
        will let you type out your own")
            .addDropdown((cb) => {
            cb
                .addOption("slash", "slash `/`")
                .addOption("pipe", "pipe `|`")
                .addOption("tilde", "tilde `~`")
                .addOption("ampersand", "ampersand `&`")
                .addOption("custom", "custom")
                .setValue(this.plugin.settings.cursorSeperatorOption
                || DEFAULT_SETTINGS.cursorSeperatorOption)
                .onChange(this.basicOnChange());
        });
        this.custom = new obsidian.Setting(this.element)
            .setName("String will be padded by a space on each side. \
        Consecutive whitespace is squashed to 1 space (per HTML rules). \
        For example: '/' will be displayed as ' / '")
            .addText((text) => {
            text
                .setValue(this.plugin.settings.cursorSeperator)
                .onChange(this.customOnChange());
        });
        this.resetSetting();
        this.toggleCustom();
    }
}
class RangeSeperator extends SettingElementCustom {
    constructor(container, plugin) {
        super(container, "Range Seperator", plugin, "rangeSeperatorOption", "arrow 'â†’'");
        this.customName = "rangeSeperator";
        this.setting = new obsidian.Setting(this.element)
            .setName("String to seperate the beginning and end of a selection \
          when `Selection Mode` is set to `Full Selection`. \
          Selecting `custom` will let you type out your own")
            .addDropdown((cb) => {
            cb
                .addOption("arrow", "arrow 'â†’'")
                .addOption("dash", "dash `-`")
                .addOption("tilde", "tilde `~`")
                .addOption("custom", "custom")
                .setValue(this.plugin.settings.rangeSeperatorOption
                || DEFAULT_SETTINGS.rangeSeperatorOption)
                .onChange(this.basicOnChange());
        });
        this.custom = new obsidian.Setting(this.element)
            .setName("String will NOT be padded by a space on each side. \
          Consecutive whitespace is squashed to 1 space (per HTML rules) \
          For example: '->' will be displayed as '2->3' and ' -> ' will \
          be displayed as '2 -> 3'")
            .addText((text) => {
            text
                .setValue(this.plugin.settings.rangeSeperator)
                .onChange(this.customOnChange());
        });
        this.resetSetting();
        this.toggleCustom();
    }
}
class DisplayCursorLines extends SettingElement {
    constructor(container, plugin) {
        super(container, "Display Cursor Line Count", plugin, "displayCursorLines");
        this.setting = new obsidian.Setting(this.element)
            .setName("Display the number of lines selected by each cursor.")
            .addToggle((cb) => {
            cb
                .setValue(this.plugin.settings.displayCursorLines != null
                ? this.plugin.settings.displayCursorLines
                : DEFAULT_SETTINGS.displayCursorLines)
                .onChange(this.onChange());
        });
        this.resetSetting();
    }
    onChange() {
        return (value) => __awaiter(this, void 0, void 0, function* () {
            yield this.basicOnChange()(value);
            this.toggleChildren();
        });
    }
    showChildren() {
        if (this.plugin.settings.displayCursorLines) {
            super.showChildren();
        }
    }
    toggleChildren() {
        const display = this.plugin.settings.displayCursorLines;
        display ? super.showChildren() : super.hideChildren();
    }
}
class CursorLinePattern extends SettingElementCustom {
    constructor(container, plugin) {
        super(container, "Cursor Line Pattern", plugin, "cursorLinePatternOption", "[lc]");
        this.customName = "cursorLinePattern";
        this.setting = new obsidian.Setting(this.element)
            .setName("Pattern to display number of highlighted lines for each cursor.")
            .addDropdown((cb) => {
            cb
                .addOption("square", "[lc]")
                .addOption("curly", "{lc}")
                .addOption("parens", "(lc)")
                .addOption("pointy", "<lc>")
                .addOption("custom", "custom")
                .setValue(this.plugin.settings.cursorLinePatternOption
                || DEFAULT_SETTINGS.cursorLinePatternOption)
                .onChange(this.basicOnChange());
        });
        this.custom = new obsidian.Setting(this.element)
            .setName("`lc` is the line count and will not be displayed if only one line \
          is selected or 'Display Cursor Line Count' setting is `false`. \
          Leading and trailing whitespace is trimmed.")
            .addText((text) => {
            text
                .setValue(this.plugin.settings.cursorLinePattern)
                .onChange(this.customOnChange());
        });
        this.resetSetting();
        this.toggleCustom();
    }
}
class StatusBarPadding extends SettingElement {
    constructor(container, plugin) {
        super(container, "Pad Status Bar", plugin, "statusBarPadding");
        this.setting = new obsidian.Setting(this.element)
            .setName("Add padding to lessen the amount the status bar shifts")
            .addToggle((cb) => {
            cb
                .setValue(this.plugin.settings.statusBarPadding != null
                ? this.plugin.settings.statusBarPadding
                : DEFAULT_SETTINGS.statusBarPadding)
                .onChange(this.onChange());
        });
        this.resetSetting();
    }
    onChange() {
        return (value) => __awaiter(this, void 0, void 0, function* () {
            yield this.basicOnChange()(value);
            this.toggleChildren();
        });
    }
    showChildren() {
        if (this.plugin.settings.statusBarPadding) {
            super.showChildren();
        }
    }
    toggleChildren() {
        const display = this.plugin.settings.statusBarPadding;
        display ? super.showChildren() : super.hideChildren();
    }
}
class PaddingStep extends SettingElementCustom {
    constructor(container, plugin) {
        super(container, "Padding Width", plugin, "paddingStepOption", "low `6px`");
        this.customName = "paddingStep";
        this.setting = new obsidian.Setting(this.element)
            .setName("Amount the status bar will round to when padding.")
            .setDesc("For example, with the default value of '12' the status bar \
        could be set to a width of 60 if the contents width is 55.")
            .addDropdown((cb) => {
            cb
                .addOption("low", "low `6px`")
                .addOption("medium", "medium `12px`")
                .addOption("high", "high `24px`")
                .addOption("custom", "custom")
                .setValue(this.plugin.settings.paddingStepOption
                || DEFAULT_SETTINGS.paddingStepOption)
                .onChange(this.basicOnChange());
        });
        this.custom = new obsidian.Setting(this.element)
            .setName("Multiples of 3 work best, though any positive value will do.")
            .setDesc("A cursor with just the head is around 70px. \
        A single selection with head and anchor plus totals is around 250px. \
        3 selections like the above with individual line counts is around 500px.")
            .addText((text) => {
            var _a, _b;
            text
                .setValue((_b = (_a = this.plugin.settings) === null || _a === void 0 ? void 0 : _a.paddingStep) === null || _b === void 0 ? void 0 : _b.toString())
                .onChange(this.numberOnChange());
        });
        this.warning = this.createWarning();
        this.resetSetting();
        this.toggleCustom();
    }
}
class WordyDisplay extends SettingElement {
    constructor(container, plugin) {
        super(container, "Display as Percent", plugin, "wordyDisplay");
        this.percents = [];
        this.rowcol = [];
        this.setting = new obsidian.Setting(this.element)
            .setName("Display percent thru the document instead of line number")
            .addToggle((cb) => {
            cb
                .setValue(this.plugin.settings.wordyDisplay != null
                ? this.plugin.settings.wordyDisplay
                : DEFAULT_SETTINGS.wordyDisplay)
                .onChange(this.onChange());
        });
        this.resetSetting();
    }
    onChange() {
        return (value) => __awaiter(this, void 0, void 0, function* () {
            yield this.basicOnChange()(value);
            this.showSettings();
        });
    }
    showSettings() {
        if (this.plugin.settings.wordyDisplay) {
            this.percents.forEach(s => s.show());
            this.rowcol.forEach(s => s.hide());
        }
        else {
            this.percents.forEach(s => s.hide());
            this.rowcol.forEach(s => s.show());
        }
    }
}
class FuzzyAmount extends SettingElement {
    constructor(container, plugin) {
        super(container, "Percentage Mode", plugin, "fuzzyAmount", "Strict Percentages");
        this.setting = new obsidian.Setting(this.element)
            .setName("How many words vs percent numbers to display.")
            .setDesc("__Very Wordy__: only uses words, splits the document into 5ths \
        __A Little Wordy__: only uses words, splits the document into 3rds \
        __Strict Percentages__: Will say at the top and bottom, and then percentages from 1% to 99% \
        __Low Fuzzy Percentages__: Will say at the top and bottom for the first and last 10%, percentages for the rest of the document \
        __High Fuzzy Percentages__: Will say at the top and bottom for the first and last 20%, percentages for the rest of the document \
        __Only Percentages__: Shows percentages throughout the document, no words are used")
            .addDropdown((cb) => {
            cb
                .addOption("strictpercent", "Strict Percentages")
                .addOption("lowfuzzypercent", "Low Fuzzy Percentages")
                .addOption("highfuzzypercent", "High Fuzzy Percentages")
                .addOption("onlypercent", "Only Percentages")
                .addOption("verywordy", "Very Wordy")
                .addOption("littewordy", "Little Wordy")
                .setValue(this.plugin.settings.fuzzyAmount
                || DEFAULT_SETTINGS.fuzzyAmount)
                .onChange(this.basicOnChange());
        });
        this.resetSetting();
    }
}
class ExcludeFrontmatter extends SettingElement {
    constructor(container, plugin) {
        super(container, "Exclude Frontmatter", plugin, "excludeFrontmatter");
        this.setting = new obsidian.Setting(this.element)
            .setName("Exclude the frontmatter as part of the document percentage")
            .addToggle((cb) => {
            cb
                .setValue(this.plugin.settings.excludeFrontmatter != null
                ? this.plugin.settings.excludeFrontmatter
                : DEFAULT_SETTINGS.excludeFrontmatter)
                .onChange(this.onChange());
        });
        this.resetSetting();
    }
    onChange() {
        return (value) => __awaiter(this, void 0, void 0, function* () {
            yield this.basicOnChange()(value);
            this.toggleChildren();
        });
    }
    showChildren() {
        if (this.plugin.settings.excludeFrontmatter) {
            super.showChildren();
        }
    }
    toggleChildren() {
        const display = this.plugin.settings.excludeFrontmatter;
        display ? super.showChildren() : super.hideChildren();
    }
}
class FrontmatterString extends SettingElementCustom {
    constructor(container, plugin) {
        super(container, "Frontmatter Phrase", plugin, "frontmatterString");
        this.customName = "frontmatterStringCustom";
        this.setting = new obsidian.Setting(this.element)
            .setName("What to call the frontmatter when cursor is inside it")
            .addDropdown((cb) => {
            cb
                .addOption("frontmatter", "frontmatter")
                .addOption("metadata", "metadata")
                .addOption("preamble", "preamble")
                .addOption("custom", "custom")
                .setValue(this.plugin.settings.frontmatterString
                || DEFAULT_SETTINGS.frontmatterString)
                .onChange(this.basicOnChange());
        });
        this.custom = new obsidian.Setting(this.element)
            .setName("If you don't like the options provided, \
        you can set the frontmatter to whaterver \
        you want with this.")
            .addText((text) => {
            var _a;
            text
                .setValue((_a = this.plugin.settings) === null || _a === void 0 ? void 0 : _a.frontmatterStringCustom)
                .onChange(this.customOnChange());
        });
        this.resetSetting();
        this.toggleCustom();
    }
}

class CursorLocationSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createDiv().createEl("h2", { text: "Cursor Information" });
        const NumberCursors$1 = new NumberCursors(containerEl, this.plugin);
        const CursorSeperator$1 = new CursorSeperator(containerEl, this.plugin);
        NumberCursors$1.children.push(CursorSeperator$1);
        const SelectionMode$1 = new SelectionMode(containerEl, this.plugin);
        const RangeSeperator$1 = new RangeSeperator(containerEl, this.plugin);
        SelectionMode$1.children.push(RangeSeperator$1);
        const WordyDisplay$1 = new WordyDisplay(containerEl, this.plugin);
        // Add a Dropdown "Pattern" option, maybe switch Display Pattern
        // As part of the "custom" option, show the other options
        const DisplayPattern$1 = new DisplayPattern(containerEl, this.plugin);
        const DisplayCursorLines$1 = new DisplayCursorLines(containerEl, this.plugin);
        const CursorLinePattern$1 = new CursorLinePattern(containerEl, this.plugin);
        DisplayCursorLines$1.children.push(CursorLinePattern$1);
        const FuzzyAmount$1 = new FuzzyAmount(containerEl, this.plugin);
        const ExcludeFrontmatter$1 = new ExcludeFrontmatter(containerEl, this.plugin);
        const FrontmatterString$1 = new FrontmatterString(containerEl, this.plugin);
        ExcludeFrontmatter$1.children.push(FrontmatterString$1);
        const StatusBarPadding$1 = new StatusBarPadding(containerEl, this.plugin);
        const PaddingStep$1 = new PaddingStep(containerEl, this.plugin);
        StatusBarPadding$1.children.push(PaddingStep$1);
        const DisplayCharCount$1 = new DisplayCharCount(containerEl, this.plugin);
        const DisplayTotalLineCount$1 = new DisplayTotalLineCount(containerEl, this.plugin);
        WordyDisplay$1.percents.push(FuzzyAmount$1);
        WordyDisplay$1.percents.push(ExcludeFrontmatter$1);
        WordyDisplay$1.rowcol.push(DisplayPattern$1);
        WordyDisplay$1.rowcol.push(DisplayCursorLines$1);
        ExcludeFrontmatter$1.toggleChildren();
        NumberCursors$1.toggleChildren();
        SelectionMode$1.toggleChildren();
        DisplayCursorLines$1.toggleChildren();
        StatusBarPadding$1.toggleChildren();
        WordyDisplay$1.showSettings();
        const cursorLocationSettings = [
            NumberCursors$1,
            SelectionMode$1,
            DisplayCharCount$1,
            DisplayTotalLineCount$1,
            DisplayPattern$1,
            CursorSeperator$1,
            RangeSeperator$1,
            DisplayCursorLines$1,
            CursorLinePattern$1,
            StatusBarPadding$1,
            PaddingStep$1,
            WordyDisplay$1,
            FuzzyAmount$1,
            ExcludeFrontmatter$1,
            FrontmatterString$1,
        ];
        containerEl.createDiv().createEl("h2", { text: "Reset All Settings" });
        let resetAllEl = containerEl.createDiv();
        new obsidian.Setting(resetAllEl)
            .setName("Reset all settings to default values.")
            .addButton((cb) => cb.setButtonText("Reset").onClick(() => __awaiter(this, void 0, void 0, function* () {
            console.log("resetting all values to their defaults");
            cursorLocationSettings.forEach(setting => setting.resetComponent());
            yield this.plugin.saveSettings();
            NumberCursors$1.toggleChildren();
            SelectionMode$1.toggleChildren();
            DisplayCursorLines$1.toggleChildren();
            StatusBarPadding$1.toggleChildren();
            WordyDisplay$1.showSettings();
        })));
    }
}

function generateSelections(doc, ranges, frontmatter = null) {
    let selections = new Selections();
    ranges.forEach((range) => {
        selections.addCursor(new CursorData(range, doc, frontmatter));
    });
    return selections;
}
class Selections {
    constructor() {
        this.lines = 0;
        this.chars = 0;
        this.cursors = [];
    }
    addCursor(cursor) {
        this.chars += cursor.highlightedChars;
        this.lines += cursor.highlightedLines;
        this.cursors.push(cursor);
    }
    totalDisplay(settings) {
        let totalsDisplay = "";
        let textDisplay;
        let lineDisplay;
        if (settings.displayCharCount) {
            textDisplay = format(SELECTTEXTDISPLAY, this.chars);
        }
        if (settings.displayTotalLines) {
            lineDisplay = format(SELECTLINEDISPLAY, this.lines);
        }
        if (settings.displayCharCount && settings.displayTotalLines) {
            totalsDisplay = format(SELECTMULT, textDisplay, lineDisplay);
        }
        else if (settings.displayCharCount) {
            totalsDisplay = format(SELECTSINGLE, textDisplay);
        }
        else if (settings.displayTotalLines) {
            totalsDisplay = format(SELECTSINGLE, lineDisplay);
        }
        return totalsDisplay;
    }
}
class CursorData {
    constructor(range, doc, frontmatter) {
        this.docLineCount = doc.lines;
        this.docCharCount = doc.length;
        const aLine = doc.lineAt(range.anchor);
        this.anchorLine = aLine.number;
        this.anchorChar = range.anchor - aLine.from;
        const hLine = doc.lineAt(range.head);
        this.headLine = hLine.number;
        this.headChar = range.head - hLine.from;
        this.highlightedChars = range.to - range.from;
        this.highlightedLines = Math.abs(this.anchorLine - this.headLine) + 1;
        this.frontmatter = frontmatter;
    }
    partialString(value, skipTotal = false) {
        if (!skipTotal || MIDDLEPATTERN.test(value)) {
            value = value.replace("ct", this.docLineCount.toString());
        }
        else if (BEGINPATTERN.test(value)) {
            value = value.replace(BEGINPATTERN, "$1");
        }
        else if (ENDPATTERN.test(value)) {
            value = value.replace(ENDPATTERN, "$1");
        }
        return value;
    }
    anchorString(value, skipTotal = false) {
        return this.partialString(value, skipTotal)
            .replace("ch", this.anchorChar.toString())
            .replace("ln", this.anchorLine.toString());
    }
    headString(value, skipTotal = false) {
        return this.partialString(value, skipTotal)
            .replace("ch", this.headChar.toString())
            .replace("ln", this.headLine.toString());
    }
    percent(line) {
        let total = (this.docLineCount - 1);
        line -= 1;
        if (this.frontmatter === null) {
            const res = Math.round(((line / total) + Number.EPSILON) * 100);
            return res;
        }
        line -= this.frontmatter;
        total -= this.frontmatter;
        const res = Math.round(((line / total) + Number.EPSILON) * 100);
        return res;
    }
    wordyString(curLine, fuzzyAmount, frontmatterString) {
        if (this.frontmatter != null && this.frontmatter >= curLine) {
            return frontmatterString;
        }
        const pct = this.percent(curLine);
        switch (fuzzyAmount) {
            case "verywordy":
                return LOWRANGEWORDS.get(closest(pct, 20));
            case "littewordy":
                return HIGHRANGEWORDS.get(closest(pct, 33));
            case "strictpercent":
                if (pct == 0 || pct == 100) {
                    return HARDPERCENTWORDS.get(pct);
                }
                return `${pct}%`;
            case "lowfuzzypercent":
                if (pct <= 10)
                    return "top";
                if (pct >= 90)
                    return "bottom";
                return `${pct}%`;
            case "highfuzzypercent":
                if (pct <= 20)
                    return "top";
                if (pct >= 80)
                    return "bottom";
                return `${pct}%`;
            case "onlypercent":
                return `${pct}%`;
        }
        return "";
    }
    headWordy(fuzzyAmount, frontmatterString) {
        return this.wordyString(this.headLine, fuzzyAmount, frontmatterString);
    }
    anchorWordy(fuzzyAmount, frontmatterString) {
        return this.wordyString(this.anchorLine, fuzzyAmount, frontmatterString);
    }
}

function frontmatter(doc, settings) {
    if (!settings.wordyDisplay || !settings.excludeFrontmatter)
        return null;
    const result = doc.toString().match(FRONTMATTER);
    return result ? doc.lineAt(result[0].length).number : null;
}
function getCursorSeperator(settings) {
    let seperator = settings.cursorSeperatorOption == "custom"
        ? settings.cursorSeperator
        : CURSORSEPERATOR.get(settings.cursorSeperatorOption);
    seperator.trim();
    return ` ${seperator} `;
}
function getRangeSeperator(settings) {
    return settings.rangeSeperatorOption == "custom"
        ? settings.rangeSeperator
        : RANGESEPERATOR.get(settings.rangeSeperatorOption);
}
function getDisplayPattern(settings) {
    return settings.displayPatternOption == "custom"
        ? settings.displayPattern
        : DISPLAYPATTERN.get(settings.displayPatternOption);
}
class EditorPlugin {
    constructor(view) {
        this.view = view;
        this.hasPlugin = false;
    }
    calculateWidth(display, updateFont = true) {
        const statusBar = this.plugin.cursorStatusBar;
        if (!this.canvasContext) {
            const canvas = statusBar.createEl("canvas");
            // @ts-ignore
            this.canvasContext = canvas.getContext("2d");
        }
        if (updateFont) {
            const fontWeight = statusBar.getCssPropertyValue("font-weight") || "normal";
            const fontSize = statusBar.getCssPropertyValue("font-size") || "12pt";
            const fontFamily = statusBar.getCssPropertyValue("font-family") || "ui-sans-serif";
            const font = `${fontWeight} ${fontSize} ${fontFamily}`;
            this.canvasContext.font = font;
        }
        const metrics = this.canvasContext.measureText(display);
        const pad = parseInt(statusBar.getCssPropertyValue("padding-right").replace("px", ""));
        const width = Math.floor(metrics.width + pad + pad);
        return width;
    }
    update() {
        if (!this.hasPlugin || !this.plugin.showUpdates)
            return;
        const settings = this.plugin.settings;
        const state = this.view.state;
        const docLines = state.doc.lines;
        let display;
        const fmLine = frontmatter(state.doc, settings);
        let selections = generateSelections(state.doc, state.selection.ranges, fmLine);
        let cursors = selections.cursors;
        if (settings.wordyDisplay) {
            if (cursors.length == 1) {
                display = this.wordyDisplay(cursors[0]);
            }
            else if (cursors.length <= settings.numberCursors) {
                let cursorStrings = [];
                cursors.forEach((cursor) => {
                    cursorStrings.push(this.wordyDisplay(cursor, true));
                });
                const seperator = getCursorSeperator(settings);
                display = cursorStrings.join(seperator);
            }
            else {
                display = format(MULTCURSORS, cursors.length);
            }
        }
        else {
            if (cursors && settings.numberCursors) {
                if (cursors.length == 1) {
                    display = this.rowColDisplay(cursors[0]);
                }
                else if (cursors.length <= settings.numberCursors) {
                    let cursorStrings = [];
                    cursors.forEach((value) => {
                        cursorStrings.push(this.rowColDisplay(value, true, true));
                    });
                    const seperator = getCursorSeperator(settings);
                    display = cursorStrings.join(seperator);
                    if (/ct/.test(getDisplayPattern(settings))) {
                        display += seperator + docLines;
                    }
                }
                else {
                    display = format(MULTCURSORS, cursors.length);
                }
                if (selections.chars != 0) {
                    display += selections.totalDisplay(settings);
                }
                if (settings.statusBarPadding) {
                    const step = settings.paddingStepOption == "custom"
                        ? settings.paddingStep
                        : PADDINGSTEP.get(settings.paddingStepOption);
                    const width = this.calculateWidth(display);
                    let padWidth = Math.ceil(width / step) * step;
                    if (width == padWidth)
                        padWidth += Math.ceil(step / 3);
                    this.plugin.cursorStatusBar.setAttribute("style", `justify-content:right;width:${padWidth}px;`);
                }
                else {
                    this.plugin.cursorStatusBar.removeAttribute("style");
                }
            }
        }
        this.plugin.cursorStatusBar.setText(display);
    }
    addPlugin(plugin) {
        this.plugin = plugin;
        this.hasPlugin = true;
        this.update();
    }
    destroy() { }
    rowColDisplay(selection, displayLines = false, skipTotal = false) {
        let value;
        const settings = this.plugin.settings;
        const displayPattern = getDisplayPattern(settings);
        if (settings.selectionMode == "begin") {
            value = selection.anchorString(displayPattern, skipTotal);
        }
        else if (settings.selectionMode == "end") {
            value = selection.headString(displayPattern, skipTotal);
        }
        else if (selection.highlightedChars == 0) {
            value = selection.headString(displayPattern, skipTotal);
        }
        else {
            value =
                selection.anchorString(displayPattern, true) +
                    getRangeSeperator(settings) +
                    selection.headString(displayPattern, skipTotal);
        }
        if (displayLines && settings.displayCursorLines) {
            let numberLines = Math.abs(selection.anchorLine - selection.headLine) + 1;
            let cursorLinePattern = settings.cursorLinePattern;
            value += ` ${cursorLinePattern.replace("lc", numberLines.toString())}`;
        }
        return value;
    }
    wordyDisplay(cursor, displayLines = false) {
        let value;
        const settings = this.plugin.settings;
        const frontmatterString = settings.frontmatterString == "custom" ?
            settings.frontmatterStringCustom :
            settings.frontmatterString;
        if (settings.selectionMode == "begin") {
            value = cursor.anchorWordy(settings.fuzzyAmount, frontmatterString);
        }
        else if (settings.selectionMode == "end") {
            value = cursor.headWordy(settings.fuzzyAmount, frontmatterString);
        }
        else if (cursor.highlightedChars == 0) {
            value = cursor.headWordy(settings.fuzzyAmount, frontmatterString);
        }
        else {
            value =
                cursor.anchorWordy(settings.fuzzyAmount, frontmatterString) +
                    getRangeSeperator(settings) +
                    cursor.headWordy(settings.fuzzyAmount, frontmatterString);
        }
        if (displayLines && settings.displayCursorLines) {
            let numberLines = Math.abs(cursor.anchorLine - cursor.headLine) + 1;
            let cursorLinePattern = settings.cursorLinePattern;
            value += ` ${cursorLinePattern.replace("lc", numberLines.toString())}`;
        }
        return value;
    }
}
const editorPlugin = view.ViewPlugin.fromClass(EditorPlugin);

class CursorLocation extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.cursorStatusBar = null;
        this.showUpdates = true;
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("loading Cursor Location plugin");
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
            this.addSettingTab(new CursorLocationSettingTab(this.app, this));
            this.cursorStatusBar = this.addStatusBarItem();
            this.registerEditorExtension(editorPlugin);
            this.app.workspace.onLayoutReady(() => {
                this.giveEditorPlugin(this.app.workspace.getMostRecentLeaf());
                this.updateShowStatus();
            });
            this.registerEvent(this.app.workspace.on("active-leaf-change", (leaf) => __awaiter(this, void 0, void 0, function* () {
                this.giveEditorPlugin(leaf);
                this.updateShowStatus();
            })));
            this.registerEvent(this.app.workspace.on("layout-change", () => {
                this.updateShowStatus();
            }));
        });
    }
    updateShowStatus() {
        var _a, _b;
        const mode = (_b = (_a = this.app.workspace.getActiveViewOfType(obsidian.View)) === null || _a === void 0 ? void 0 : _a.getState()) === null || _b === void 0 ? void 0 : _b.mode;
        this.showUpdates = mode == "source";
        if (!this.showUpdates) {
            this.cursorStatusBar.setText("");
            this.cursorStatusBar.removeAttribute("style");
        }
    }
    onunload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("unloading Cursor Location plugin");
            this.cursorStatusBar = null;
        });
    }
    giveEditorPlugin(leaf) {
        var _a;
        // @ts-expect-error
        const editor = (_a = leaf === null || leaf === void 0 ? void 0 : leaf.view) === null || _a === void 0 ? void 0 : _a.editor;
        if (editor) {
            const editorView = editor.cm;
            const editorPlug = editorView.plugin(editorPlugin);
            editorPlug.addPlugin(this);
            editorPlug.update();
        }
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = CursorLocation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsiLi4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIi4uL3NyYy9jb25zdGFudHMudHMiLCIuLi9zcmMvaGVscGVycy50cyIsIi4uL3NyYy9lbGVtZW50cy50cyIsIi4uL3NyYy9zZXR0aW5ncy50cyIsIi4uL3NyYy9zZWxlY3Rpb25zLnRzIiwiLi4vc3JjL3BsdWdpbi50cyIsIi4uL3NyYy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpudWxsLCJuYW1lcyI6WyJTZXR0aW5nIiwiUGx1Z2luU2V0dGluZ1RhYiIsIk51bWJlckN1cnNvcnMiLCJlLk51bWJlckN1cnNvcnMiLCJDdXJzb3JTZXBlcmF0b3IiLCJlLkN1cnNvclNlcGVyYXRvciIsIlNlbGVjdGlvbk1vZGUiLCJlLlNlbGVjdGlvbk1vZGUiLCJSYW5nZVNlcGVyYXRvciIsImUuUmFuZ2VTZXBlcmF0b3IiLCJXb3JkeURpc3BsYXkiLCJlLldvcmR5RGlzcGxheSIsIkRpc3BsYXlQYXR0ZXJuIiwiZS5EaXNwbGF5UGF0dGVybiIsIkRpc3BsYXlDdXJzb3JMaW5lcyIsImUuRGlzcGxheUN1cnNvckxpbmVzIiwiQ3Vyc29yTGluZVBhdHRlcm4iLCJlLkN1cnNvckxpbmVQYXR0ZXJuIiwiRnV6enlBbW91bnQiLCJlLkZ1enp5QW1vdW50IiwiRXhjbHVkZUZyb250bWF0dGVyIiwiZS5FeGNsdWRlRnJvbnRtYXR0ZXIiLCJGcm9udG1hdHRlclN0cmluZyIsImUuRnJvbnRtYXR0ZXJTdHJpbmciLCJTdGF0dXNCYXJQYWRkaW5nIiwiZS5TdGF0dXNCYXJQYWRkaW5nIiwiUGFkZGluZ1N0ZXAiLCJlLlBhZGRpbmdTdGVwIiwiRGlzcGxheUNoYXJDb3VudCIsImUuRGlzcGxheUNoYXJDb3VudCIsIkRpc3BsYXlUb3RhbExpbmVDb3VudCIsImUuRGlzcGxheVRvdGFsTGluZUNvdW50IiwiYy5TRUxFQ1RURVhURElTUExBWSIsImMuU0VMRUNUTElORURJU1BMQVkiLCJjLlNFTEVDVE1VTFQiLCJjLlNFTEVDVFNJTkdMRSIsImMuTUlERExFUEFUVEVSTiIsImMuQkVHSU5QQVRURVJOIiwiYy5FTkRQQVRURVJOIiwiYy5MT1dSQU5HRVdPUkRTIiwiYy5ISUdIUkFOR0VXT1JEUyIsImMuSEFSRFBFUkNFTlRXT1JEUyIsImMuRlJPTlRNQVRURVIiLCJjLkNVUlNPUlNFUEVSQVRPUiIsImMuUkFOR0VTRVBFUkFUT1IiLCJjLkRJU1BMQVlQQVRURVJOIiwiYy5NVUxUQ1VSU09SUyIsImMuUEFERElOR1NURVAiLCJWaWV3UGx1Z2luIiwiUGx1Z2luIiwiVmlldyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFvR0E7QUFDTyxTQUFTLFNBQVMsQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUU7QUFDN0QsSUFBSSxTQUFTLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxPQUFPLEtBQUssWUFBWSxDQUFDLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLFVBQVUsT0FBTyxFQUFFLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUU7QUFDaEgsSUFBSSxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUMsRUFBRSxVQUFVLE9BQU8sRUFBRSxNQUFNLEVBQUU7QUFDL0QsUUFBUSxTQUFTLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO0FBQ25HLFFBQVEsU0FBUyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFT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
